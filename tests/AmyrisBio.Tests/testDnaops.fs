module testDnaops

open NUnit.Framework
open Amyris.Bio.dnaops
open Amyris.Bio.biolib
open Amyris.Bio.utils

let refTestGenome = @"..\..\..\test_data\S288C.fsa" |> Amyris.Bio.utils.smashSlash
[<TestFixture>]
type TestDnaops() = class 
    
    do
        ()

    let testEPCR (genome:System.Collections.Generic.Dictionary<string,char []>) pFwd pRev =
            let pcr1 = ePCR (genome |> Seq.map (fun p -> p.Key,p.Value) |> Map.ofSeq) pFwd pRev 
            Assert.IsTrue(pcr1.IsSome)
            let p1 = pcr1.Value
            Assert.IsTrue(p1.template.[p1.fwdStart..p1.fwdStart+pFwd.Length-1] = pFwd)
            Assert.IsTrue(arr2seq(p1.template.[p1.revEnd-pRev.Length+1..p1.revEnd].ToCharArray() |> revComp) = pRev)
            if p1.chrFwd then
                Assert.IsTrue((pFwd = arr2seq (genome.[p1.chr].[p1.chrFrom..p1.chrFrom+pFwd.Length-1])))
                Assert.IsTrue((pRev = arr2seq (revComp genome.[p1.chr].[p1.chrTo-pRev.Length+1..p1.chrTo])))
            else  
                Assert.IsTrue((pFwd = arr2seq (revComp genome.[p1.chr].[p1.chrFrom-pFwd.Length+1..p1.chrFrom])))
                Assert.IsTrue((pRev = arr2seq (genome.[p1.chr].[p1.chrTo..p1.chrTo+pRev.Length-1])))


    [<Test>]
    member x.TestEPCRwithMultiplePrimerMatches() =
        // matalpha has multiple matches on the same chromosome, which makes the PCR a bit more tricky to simulate
        let pMatalpha = "ACAGTTCAATAAGACATCTATAAAATCTT"
        let pTaf2 = "ACTTTTAGGATACTTTCACGCTTTATAACA".ToCharArray() |> revComp |> arr2seq
        let genome = readReference refTestGenome

        testEPCR genome pMatalpha pTaf2
        testEPCR genome pTaf2 pMatalpha
        
    [<Test>]
    member x.``Simulate PCR with identical forward and reverse primers``() = 
        let template = [("0","GACGGCACGGCCACGCGTTTAAACCGCCTGTTTCTCCCGCTGATCCGATTACTAGCCGAAGACGTAAAATTGGCGCTTGATTCAATTTATGCCCTTCCCGGGAATAGTTGACCAAAGGGCAAAAAAATTCAGTCGGAGATTCCCTATTGGGCGGAATTTAGTAGATCTCTTTCCGTGCATAACGCCTGCCCGTTAGTCGTTATTTCACGTTAACATTTTCTTGGCCACTGCGCTATATAAATAAATACATATATATATGTCAAGCACAATAAAGAAACTTCCCTTAAATATTGAATAAGTAAATAATAGTTGAAAAGTGCCTTTTGTTCGAAGGATTAGAGTGTTCTTAATTTTAGTTCGTTCAACGGTCTCAAAAAAAGTGTGAACAAGTAAAGCATAGCACACATCCCAAATTACAAGGCACCCTGATTAAAAATCCAAAAATAAACCATAAGTTTTATTTTACTAAAAACATTATACGTGAAAGACAAACCGCATCAGAAGTTTCGAGGCGCTCGTCCAACGCCGGCGGACCTGGAACTTTCAGTAATACGCTTAACTGCTCATTGCTATATTGAAGTACGGATTAGAAGCCGCCGAGCGGGCGACAGCCCTCCGACGGAAGACTCTCCTCCGTGCGTCCTGGTCTTCACCGGTCGCGTTCCTGAAACGCAGATGTGCCTCGCGCCGCACTGCTCCGAACAATAAAGATTCTACAATACTAGCTTTTATGGTTATGAAGAGGAAAAATTGGCAGTAACCTGGCCCCACAAACCTTCAAATCAACGAATCAAATTAACAACCATAGGATAATAATGCGATTAGTTTTTTAGCCTTATTTCTGGGGTAATTAATCAGCGAAGCGATGATTTTTGATCTATTAACAGATATATAAATGCAAAAGCTGCATAACCACTTTAACTAATACTTTCAACATTTTCGGTTTGTATTACTTCTTATTCAAATGTCATAAAAGTATCAACAAAAAATTGTTAATATACCTCTATACTTTAACGTCAAGGAGAAAAAACTATAATGTTGACATCTTCTAAGTCCATCGAATCTTTCCCAAAGAACGTTCAACCATACGGTAAACACTATCAAAACGGTTTAGAACCAGTCGGTAAGTCTCAAGAAGACATCTTGTTGGAACCTTTCCACTACTTATGTTCTAATCCAGGTAAGGATGTTAGAACCAAGATGATTGAAGCTTTCAACGCCTGGTTGAAAGTCCCAAAGGACGATTTGATTGTTATCACCAGAGTCATTGAAATGTTGCACTCCGCTTCTTTGTTGATTGATGACGTCGAGGACGATTCTGTCTTGAGAAGAGGTGTCCCAGCCGCCCACCATATCTACGGTACCCCTCAAACCATCAACTGCGCTAACTACGTTTATTTCTTGGCCTTGAAAGAAATCGCCAAGTTGAACAAGCCAAATATGATTACTATTTATACCGATGAATTGATCAACTTGCACAGAGGTCAAGGTATGGAATTGTTCTGGCGTGATACCTTGACCTGCCCAACTGAGAAAGAGTTTTTGGATATGGTTAACGATAAGACTGGTGGTTTGTTGAGATTGGCCGTCAAGTTGATGCAAGAGGCTTCTCAATCTGGTACCGACTATACTGGTTTGGTTTCTAAGATCGGTATCCATTTTCAAGTTAGAGATGACTACATGAACTTGCAATCCAAAAACTACGCCGATAATAAGGGTTTCTGTGAAGATTTGACCGAAGGTAAGTTCTCCTTTCCAATTATTCACTCTATCAGATCTGACCCATCCAACAGACAATTATTGAATATTTTGAAGCAAAGATCTTCTTCTATTGAATTGAAACAATTCGCTTTACAATTGTTAGAAAACACTAACACTTTTCAATACTGTAGAGATTTCTTGAGAGTTTTGGAAAAGGAAGCCAGAGAAGAGATCAAATTATTGGGTGGTAACATCATGTTGGAAAAGATTATGGACGTCTTGTCTGTTAATGAATAAGTCGCCCTCAGTCCGCTCATTTTAGCTGAATTTTCTAATGTTATTTTTCATCAGCAAAACTTAACAGAACGTTAATTTATCTACCCCTTTTAGTTCATTATCTCTTTTTTATCCAACATTTTACAGAGATCTCTCACTTAAGTCTAAGTAAAGACATTATTTTATATGGTACACTTATAGAATATACGATAATAATAATAAAAACTATGTAACATAACCTTCAGAATTTAATATTAGTTTCCTTTTTACCTCATTGCACTAATAAAAAAATTCTACAGAATCTCCGAAAAAGAAAATCCAGCTTACTCTTTTTGTTTTCTTCTTCACACGTGAGCTTTTCCGCCGGCATACGTTCCGTTCCGTGTCGTCTTGCATAAAATTTCCGAATCACATGTTCGTAAAACAACCGGAAGTGCCCCGAATATAAAGTCAATTCTCACCGCTGTTGTAACTGGAGCTTTAAGGTGTTATCTAAGGAAGGATAAAAGAACTTAAACAAATCCCCGCGTGCTTGGCCGGCCGTACGAAAATCGTTATTGTCTTGAAGGTGAAATTTCTACTCTTATTAATGGTGAACGTTAAGCTGATGCTATGATGGAAGCTGATTGGTCTTAACTTGCTTGTCATCTTGCTAATGGTCATTGGCTCGTGTTATTACTTAAGTTATTTGTACTCGTTTTGAACGTAATGCTAATGATCATCTTATGGAATAATAGTGAACGGCCGGCCAAGCACGCGGGGATTTGTTTAAGTTCTTTTATCCTTCCTTAGATAACACCTTAAAGCTCCAGTTACAACAGCGGTGAGAATTGACTTTATATTCGGGGCACTTCCGGTTGTTTTACGAACATGTGATTCGGAAATTTTATGCAAGACGACACGGAACGGAACGTATGCCGGCGGAAAAGCTCACGTGTGAAGAAGAAAACAAAAAGAGTAAGCTGGATTTTCTTTTTCGGAGATTCTGTAGAATTTTTTTATTAGTGCAATGAGGTAAAAAGGAAACTAATATTAAATTCTGAAGGTTATGTTACATAGTTTTTATTATTATTATCGTATATTCTATAAGTGTACCATATAAAATAATGTCTTTACTTAGACTTAAGTGAGAGATCTCTGTAAAATGTTGGATAAAAAAGAGATAATGAACTAAAAGGGGTAGATAAATTAACGTTCTGTTAAGTTTTGCTGATGAAAAATAACATTAGAAAATTCAGCTAAAATGAGCGGACTGAGGGCGACTTATTCATTAACAGACAAGACGTCCATAATCTTTTCCAACATGATGTTACCACCCAATAATTTGATCTCTTCTCTGGCTTCCTTTTCCAAAACTCTCAAGAAATCTCTACAGTATTGAAAAGTGTTAGTGTTTTCTAACAATTGTAAAGCGAATTGTTTCAATTCAATAGAAGAAGATCTTTGCTTCAAAATATTCAATAATTGTCTGTTGGATGGGTCAGATCTGATAGAGTGAATAATTGGAAAGGAGAACTTACCTTCGGTCAAATCTTCACAGAAACCCTTATTATCGGCGTAGTTTTTGGATTGCAAGTTCATGTAGTCATCTCTAACTTGAAAATGGATACCGATCTTAGAAACCAAACCAGTATAGTCGGTACCAGATTGAGAAGCCTCTTGCATCAACTTGACGGCCAATCTCAACAAACCACCAGTCTTATCGTTAACCATATCCAAAAACTCTTTCTCAGTTGGGCAGGTCAAGGTATCACGCCAGAACAATTCCATACCTTGACCTCTGTGCAAGTTGATCAATTCATCGGTATAAATAGTAATCATATTTGGCTTGTTCAACTTGGCGATTTCTTTCAAGGCCAAGAAATAAACGTAGTTAGCGCAGTTGATGGTTTGAGGGGTACCGTAGATATGGTGGGCGGCTGGGACACCTCTTCTCAAGACAGAATCGTCCTCGACGTCATCAATCAACAAAGAAGCGGAGTGCAACATTTCAATGACTCTGGTGATAACAATCAAATCGTCCTTTGGGACTTTCAACCAGGCGTTGAAAGCTTCAATCATCTTGGTTCTAACATCCTTACCTGGATTAGAACATAAGTAGTGGAAAGGTTCCAACAAGATGTCTTCTTGAGACTTACCGACTGGTTCTAAACCGTTTTGATAGTGTTTACCGTATGGTTGAACGTTCTTTGGGAAAGATTCGATGGACTTAGAAGATGTCAACATTATAGTTTTTTCTCCTTGACGTTAAAGTATAGAGGTATATTAACAATTTTTTGTTGATACTTTTATGACATTTGAATAAGAAGTAATACAAACCGAAAATGTTGAAAGTATTAGTTAAAGTGGTTATGCAGCTTTTGCATTTATATATCTGTTAATAGATCAAAAATCATCGCTTCGCTGATTAATTACCCCAGAAATAAGGCTAAAAAACTAATCGCATTATTATCCTATGGTTGTTAATTTGATTCGTTGATTTGAAGGTTTGTGGGGCCAGGTTACTGCCAATTTTTCCTCTTCATAACCATAAAAGCTAGTATTGTAGAATCTTTATTGTTCGGAGCAGTGCGGCGCGAGGCACATCTGCGTTTCAGGAACGCGACCGGTGAAGACCAGGACGCACGGAGGAGAGTCTTCCGTCGGAGGGCTGTCGCCCGCTCGGCGGCTTCTAATCCGTACTTCAATATAGCAATGAGCAGTTAAGCGTATTACTGAAAGTTCCAGGTCCGCCGGCGTTGGACGAGCGATTGCATCAGGTCCATAAAATGTTTTTGTCTGCTTTTTTTTCTTCATGTATTAGTTGGTTTTTATTTTTATATTTTCATTTATCTTATTCATACTTTTTACTCCTTTTTTCTTCATTCTTTACGATCTTGGACATTCAACTAGCCTATGGTAACTTTTCTTATTACTTTGCCCCTCCTTGAGGTGAGTAAATTCTGCATCTATTTTTTTACTATGCAAAGGATAGATAAACAATTCACATGAATGTCAAAATTTTGAAAAACACTCATTATTCAAAAAGATTGCATAAAAAGATATACACTTAAAGTGCAAGATTATACCAACTTTCAGAATACGGAGAGGTTTTTAAGTGGATGAGCATTTTTTCATAACGTTCTAAAACGATATTTACAGTATTTGGTGGCTAAATGAAAAAAAGCCGTATCATGACTGTGCTAGAGGGCGGTTTAAACGCGTGGCCGTGCCGTC".ToCharArray())] |> Map.ofSeq
        let fwd = "agtctaagtaaagacattattttatatggtacac".ToUpper()
        let rev = fwd
        let pcr1 = ePCRAllowMultipleProducts template fwd rev 10000
        Assert.IsTrue(pcr1.Length = 1)
        let pcr2 = ePCR template fwd rev
        Assert.IsTrue(pcr2.IsSome)

        ()

    [<Test>]
    member x.``Test that the coordinates of the primers are correct``() =
        // matalpha has multiple matches on the same chromosome, which makes the PCR a bit more tricky to simulate
        let pMatalpha = "ACAGTTCAATAAGACATCTATAAAATCTT"
        let pTaf2 = "ACTTTTAGGATACTTTCACGCTTTATAACA".ToCharArray() |> revComp |> arr2seq
        let genome = readReference refTestGenome

        let pcr1 = ePCR (genome |> Seq.map (fun p -> p.Key,p.Value) |> Map.ofSeq) pMatalpha pTaf2 

        Assert.IsTrue(pcr1.IsSome)
        let p1 = pcr1.Value
        if p1.chrFwd then
            Assert.IsTrue((pMatalpha = arr2seq (genome.[p1.chr].[p1.chrFrom..p1.chrFrom+pMatalpha.Length-1])))
            Assert.IsTrue((pTaf2 = arr2seq (revComp genome.[p1.chr].[p1.chrTo-pTaf2.Length+1..p1.chrTo])))
        else  
            Assert.IsTrue((pMatalpha = arr2seq (revComp genome.[p1.chr].[p1.chrFrom-pMatalpha.Length+1..p1.chrFrom])))
            Assert.IsTrue((pTaf2 = arr2seq (genome.[p1.chr].[p1.chrTo..p1.chrTo+pTaf2.Length-1])))
        
    [<Test>]
    member x.``Test ePCR on border of chromosome``() =
        let genome = readReference refTestGenome

        // 5' side of chr 3
        let pFwd = "CCTTCACTTGTATTCTGATCGGTCATACGCA"
        let pRev = "CATATAGGAAGGTCCAATAAACTTACTACATTA".ToCharArray() |> revComp |> arr2seq
        testEPCR genome pFwd pRev
        testEPCR genome pRev pFwd
        // 3' side of Chr 3
        let pFwd2 = "TTGACTCAAAAATATGGTACGAATAATGTTTAGAT"
        let pRev2 = "AATATTGACATAAGTGTATATAAATTAAGTGGTTAGTATA".ToCharArray() |> revComp |> arr2seq
        testEPCR genome pFwd2 pRev2
        testEPCR genome pRev2 pFwd2
        

end